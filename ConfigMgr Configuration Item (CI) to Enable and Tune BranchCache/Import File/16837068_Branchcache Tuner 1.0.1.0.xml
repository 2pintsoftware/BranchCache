<?xml version="1.0" encoding="utf-8"?>
<DesiredConfigurationDigest xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/07/10/DesiredConfiguration">
  <!--Authored against the following schema version: 5-->
  <Application AuthoringScopeId="ScopeId_EB233605-0626-4D1E-BA29-3B1B229D36CA" LogicalName="Application_9d5cd961-3a14-4c1b-bd5c-bf9ba72d5a55" Version="4" Is64Bit="false">
    <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
      <DisplayName Text="Branchcache Tuner 1.0.1.0" ResourceId="ID-de7dab78-cca3-42fe-928e-2f62606867a6" />
      <Description Text="Check and adjust BranchCache settings for optimum performance" ResourceId="ID-ae9e00cf-414f-4113-b3dd-c0ebd7261bad" />
    </Annotation>
    <Parts>
      <SuppressionReferences />
    </Parts>
    <Settings>
      <RootComplexSetting>
        <SimpleSetting LogicalName="ScriptSetting_37145012-b43c-4b5c-8b30-312d1befab23" DataType="String">
          <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
            <DisplayName Text="01 Branchcache Cache Size" ResourceId="ID-21c4864d-2cb4-4b8a-be90-e860a8be95fb" />
            <Description Text="Checks the size of the cache against free space and adjusts accordingly" ResourceId="ID-ce9fba50-6c1f-4fa9-8e26-6825b0681c67" />
          </Annotation>
          <ScriptDiscoverySource Is64Bit="true">
            <DiscoveryScriptBody ScriptType="PowerShell">&lt;# 
   .SYNOPSIS 
    Checks size of branchcache

   .DESCRIPTION
    Checks that the current size of the branch cache is still correct 
     Note  that the default in this script are fairly conservative - so feel free to be more agressive with the cache size!

   .NOTES
    AUTHOR: 2Pint Software
    EMAIL: support@2pintsoftware.com
    VERSION: 1.0.0.2
    DATE:10/06/2018 
    
    CHANGE LOG: 
    1.0.0.0 : 12/10/2017  : Initial version of script 
    1.0.0.2 : 10/06/2018  : Added a bit more logging

   .LINK
    https://2pintsoftware.com
#&gt; 

Function TimeStamp {$(Get-Date -UFormat %T)} 
$Logfile = "$ENV:TEMP\BCTuner_Cache_Discovery00.log"
#delete any existing logfile if it exists
If (Test-Path $Logfile){ri $Logfile -Force -ErrorAction SilentlyContinue -Confirm:$false}

#=======================================
# Get the free space on the system disk as %
#=======================================
Function Get-FreeSystemDiskspace
{
    # Get the free space from WMI and return as %
    $SystemDrive = Get-WmiObject Win32_LogicalDisk  -Filter "DeviceID='$env:SystemDrive'"
    [int]$ReturnVal = $Systemdrive.FreeSpace*100/$Systemdrive.Size
    return $ReturnVal
}
#==============
# End Function
#==============

#=============================================================================
# Selects the best cache size based on free diskspace - EDIT THE DEFAULTS HERE
#=============================================================================
Function Check-BranchCachesize
{
    param([int]$CurrentFreeSpace)
    begin
    {
        switch($CurrentFreeSpace)
        {
            {$_ -lt 10}{$NewCachePercent = 2} #if less than 10% new cache should be 2%
            {$_ -lt 50 -and $_ -ge 10}{$NewCachePercent = 5} #if less than 50%  but more than 10% new cache should be 5%
            {$_ -ge 50}{$NewCachePercent = 10}#if more than 50% new cache should be 10%
            default{$NewCachePercent = 5}#default value
        }
    Return $NewCachePercent
    }
}
#==============
# End Function
#==============
$(TimeStamp) + " : BC Cache Size Check is Running   " | Out-File $Logfile -Append


# First we assume the client is compliant
$Compliance = "Compliant"

#==============================================================
# Get the size available and then return the cache space needed
#==============================================================
$FreeSpaceAvailable = Get-FreeSystemDiskspace
$CacheSize  = Check-BranchCachesize -CurrentFreeSpace $FreeSpaceAvailable

$(TimeStamp) + " : Free Space Check Returned:   " + $FreeSpaceAvailable + "%" | Out-File $Logfile -Append
$(TimeStamp) + " : Cache size should be:   " + $CacheSize + "%" | Out-File $Logfile -Append

#==============================================================
# Call netsh to carry out a match against the status
#==============================================================
$ShowStatusAllCommand = {netsh branchcache show status all}
$ShowStatusAll = Invoke-Command -ScriptBlock $ShowStatusAllCommand
# Checking cache size has been set
if(@($ShowStatusAll | Select-String -SimpleMatch -Pattern "Maximum Cache Size")[0].ToString() -match "$CacheSize% of hard disk")
{
    $Compliance = "Compliant"
}
else
{
    $Compliance = "Non-Compliant"
}

$(TimeStamp) + " : BC Cache Size Check Returned:   " + $Compliance | Out-File $Logfile -Append
$Compliance</DiscoveryScriptBody>
            <RemediationScriptBody ScriptType="PowerShell">&lt;# 
   .SYNOPSIS 
 Sets the Branchcache Cache size

   .DESCRIPTION
 Sets the Branchcache Cache according to free disk space % so that as disk space reduces the cache can be auto-adjusted
 Note  that the default in this script are fairly conservative - so feel free to be more agressive with the cache size!


   .NOTES
    AUTHOR: 2Pint Software
    EMAIL: support@2pintsoftware.com
    VERSION: 1.0.0.2
    DATE:10/06/2018 
    
    CHANGE LOG: 
    1.0.0.0 : 12/10/2017  : Initial version of script
    1.0.0.2 : 10/06/2018  : Added a bit more logging 

   .LINK
    https://2pintsoftware.com
#&gt; 
Function TimeStamp {$(Get-Date -UFormat %T)} 
$Logfile = "$ENV:TEMP\BCTuner_Cache_Remediation00.log"
#delete any existing logfile if it exists
If (Test-Path $Logfile){ri $Logfile -Force -ErrorAction SilentlyContinue -Confirm:$false}
#=======================================
# Get the free space on the system disk as %
#=======================================
Function Get-FreeSystemDiskspace
{
    # Get the free space from WMI and return as %
    $SystemDrive = Get-WmiObject Win32_LogicalDisk  -Filter "DeviceID='$env:SystemDrive'"
    [int]$ReturnVal = $Systemdrive.FreeSpace*100/$Systemdrive.Size
    return $ReturnVal
}
#==============
# End Function
#==============

#================================================================================
# Selects the best cache size based on free diskspace - edit these to your preferences
#================================================================================
Function Check-BranchCachesize
{
    param([int]$CurrentFreeSpace)
    begin
    {
        switch($CurrentFreeSpace)
        {
            {$_ -lt 10}{$NewCachePercent = 2} #if less than 10% new cache should be 2%
            {$_ -lt 50 -and $_ -ge 10}{$NewCachePercent = 5} #if less than 50%  but more than 10% new cache should be 5%
            {$_ -ge 50}{$NewCachePercent = 10}#if more than 50% new cache should be 10%
            default{$NewCachePercent = 5}#default value
        }
    Return $NewCachePercent
    }
}
#==============
# End Function
#==============

$(TimeStamp) + " : BC Cache Size Remediation is Running   " | Out-File $Logfile -Append

# Get the size available and then return the cache space needed
$FreeSpaceAvailable = Get-FreeSystemDiskspace
$CacheSize  = Check-BranchCachesize -CurrentFreeSpace $FreeSpaceAvailable

$(TimeStamp) + " : Free Space Check Returned:   " + $FreeSpaceAvailable + "%" | Out-File $Logfile -Append
$(TimeStamp) + " : Cache size should be:   " + $CacheSize + "%" | Out-File $Logfile -Append
$(TimeStamp) + " : Setting the new cache size   " | Out-File $Logfile -Append
# Call netsh to set the new cache size
$CacheSizeCmd = {netsh branchcache set cachesize size=$CacheSize percent=TRUE}
Invoke-Command -ScriptBlock $CacheSizeCmd | Out-File $Logfile -Append
$(TimeStamp) + " : BC Cache Size Remediation is Completed   " | Out-File $Logfile -Append</RemediationScriptBody>
          </ScriptDiscoverySource>
        </SimpleSetting>
        <SimpleSetting LogicalName="ScriptSetting_5e7a6c9b-0e7e-42b7-9ae7-3a99a24e0ca7" DataType="String">
          <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
            <DisplayName Text="00 BranchCache Distributed Mode" ResourceId="ID-0944e79f-9f1b-4a53-a019-6c4b05bc23b7" />
            <Description Text="Checks if the BranchCache service is enabled and the port that it's using&#xA;Sets the port to one of your choice - you need to edit the script to change it.&#xA;Default is 1337&#xA;Also includes the 'Serve on Battery' parameter - set as required default is TRUE" ResourceId="ID-377154da-7cbf-4dba-ace6-f92a3e59bdb0" />
          </Annotation>
          <ScriptDiscoverySource Is64Bit="true">
            <DiscoveryScriptBody ScriptType="PowerShell">&lt;# 
   .SYNOPSIS 
    Checks Branchcache is Using Desired Port and that the service is running

   .DESCRIPTION
    Checks for event 7,8 in the BC event log - means that F/W is blocking BC
    Checks that the Branchcache has been configured to use a specificTCP port
    Checks  the Branchcache Cache TTL value
    Checks that the BranchCache service is set to 'Distributed Caching' mode
    Checks the 'serve peers on battery power' capability
    Finally - checks that the service is running and is set to AutoStart
    If ANY of these checks fail - a status of Non-Compliance is reported 
    Creates a Logfile in the TEMP folder


NOTES
    AUTHOR: 2Pint Software
    EMAIL: support@2pintsoftware.com
    VERSION: 1.0.0.7
    DATE: 12/08/2019 
    
    CHANGE LOG: 
    1.0.0.0 : 12/10/2017  : Initial version of script 
    1.0.0.2 added logging and other minor tweaks
    1.0.0.3 : 08/06/2018  : added some more logic for checking svc auto-start and state..
    1.0.0.4 : 09/06/2018  : consolidated the 'Serve Peers on Battery' and 'Cache TTL' check into this script
    1.0.0.5 : 26/06/2018  : Added BranchCache Firewall Error Event check
    1.0.0.6 : 23/07/2019  : Improved Port  compliance checking
    1.0.0.7 : 12/08/2019  : Improved Port  checking - added ConnectPort (we were only checking ListenPort before)

   .LINK
    https://2pintsoftware.com
#&gt;
Function TimeStamp {$(Get-Date -UFormat "%D %T")}  
$Logfile = "$ENV:TEMP\BCTuner_Discovery00.log"
#delete any existing logfile if it exists
If (Test-Path $Logfile){ri $Logfile -Force -ErrorAction SilentlyContinue -Confirm:$false}
$(TimeStamp) + " : BC Port, Firewall and Service Check is Running   " | Out-File $Logfile -Append


#Set this variable to the port number that you wanna check/change - if you want to leave it at the default BC port you MUST set this to 80
#THIS SHOULD BE THE SAME AS THE EQUIVALENT VARIABLE IN THE REMEDIATION SCRIPT
#--------------
$BCPort = 1337
#--------------
#SET THIS VARIABLE TO DETERMINE IF CLIENTS CAN SERVE PEERS WHILE ON BATTERY POWER
#--------------
$ServeOnBattery = "TRUE"
#--------------

#Set this variable to check the cache TTL  - this is the time (Days) that BranchCache will keep content in the cache
#-----------------------
$TTL = 180
#-----------------------


# First we assume the client is compliant
$Compliance = "Compliant"
#================================================================
# Check the event log for events 7,8 - meaning that BC+P2P is blocked
#================================================================

$EventLogName = "Microsoft-Windows-BranchCache/Operational"
$TSpan = (Get-Date) - (New-TimeSpan -Hour 4)

#check if the BC evt log exists and returns a result (or evt 7 or 8) - if not - then we are Compliant
$log = try { 
Get-WinEvent -LogName "Microsoft-Windows-BranchCache/Operational" | Where-Object {$_.TimeCreated -ge $TSpan -and ($_.ID -eq 7 -or $_.ID -eq 8)}
           }
catch [Exception] {
        if ($_.Exception -match "There is not an event log") {
        $(TimeStamp) + " No BC event log found" | Out-File -FilePath $Logfile -Append -Encoding ascii;
                                                             }
                  }
#if no results then we are compliant (either no log found or no results returned)
if (!$log)
{
$Compliance = "Compliant"
}
#If the above query returns a result - set the status to Non-Compliant 
Else
{
    $Compliance = "Firewall Event Check Non-Compliant"
        $(TimeStamp) + " : BC Firewall Events check - failed" | Out-File $Logfile -Append
        $(TimeStamp) + " : BC Port Check Returned - " + $Compliance | Out-File $Logfile -Append
    Return $Compliance
}

$(TimeStamp) + " : BC Firewall Event Check Returned - " + $Compliance | Out-File $Logfile -Append


#=========================================================
# Call netsh to carry out a match against the status
#=========================================================
$(TimeStamp) + " : Here's the output of netsh http show url " | Out-File $Logfile -Append
$ShowHttpUrl = netsh http show url
netsh http show url  | Out-File $Logfile -Append
# Checking the port has been set - for both listen and connect ports
$BCUrlRes = $myvar = [bool]($ShowHttpUrl | Select-String -SimpleMatch -Pattern "http://+:$BCPort/116B50EB-ECE2-41ac-8429-9F9E963361B7/")
$BCListenPortReg = ((Get-ItemProperty -path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\PeerDist\DownloadManager\Peers\Connection' -Name ListenPort -ErrorAction SilentlyContinue).ListenPort) -eq $BCPort
$BCConnectPortReg = ((Get-ItemProperty -path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\PeerDist\DownloadManager\Peers\Connection' -Name ConnectPort -ErrorAction SilentlyContinue).ConnectPort) -eq $BCPort

if($BCUrlRes -eq $true -and $BCListenPortReg -eq $true -and $BCConnectPortReg -eq $true)

{
    $Compliance = "Compliant"
}
else
{
    $Compliance = "BranchCache Port Non-Compliant"
        $(TimeStamp) + " : BC Service correct Listening or Connect Port not set" | Out-File $Logfile -Append
        $(TimeStamp) + " : BC Port Check Returned - " + $Compliance | Out-File $Logfile -Append
    Return $Compliance
}

$(TimeStamp) + " : BC Port Check Returned - " + $Compliance | Out-File $Logfile -Append

#=========================================================
#Next Check that the BranchCache Cache TTL is set correctly
#=========================================================

if( (Get-ItemProperty -path 'HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\PeerDist\Retrieval' -Name SegmentTTL -ErrorAction SilentlyContinue).SegmentTTL -eq $TTL)
{
    $Compliance = "Compliant"
}
else
{
    $Compliance = "BC Cache TTL Non-Compliant"
    $(TimeStamp) + " : BC Cache TTL not setup correctly " | Out-File $Logfile -Append
    $(TimeStamp) + " : BC Cache TTL Check Returned - " + $Compliance | Out-File $Logfile -Append
    Return $Compliance
}

$(TimeStamp) + " : BC Cache TTL Check Returned - " + $Compliance | Out-File $Logfile -Append


#=========================================================
#Next Check that the BranchCache service is enabled and set to Distributed Caching
#=========================================================

# Call netsh to carry out a match against the status
$ShowStatusAllCommand = {netsh branchcache show status all}
$ShowStatusAll = Invoke-Command -ScriptBlock $ShowStatusAllCommand

# Checking status - if the previous check for BC Port number was Compliant AND the service is setup correctly - we're OK
if((@($ShowStatusAll | Select-String -SimpleMatch -Pattern "Service Mode")[0].ToString() -match "= Distributed Caching") -and ($Compliance -eq "Compliant"))
{
    $Compliance = "Compliant"
}
else
{
    $Compliance = "BC Mode Non-Compliant"
    $(TimeStamp) + " : BC Service not setup correctly " | Out-File $Logfile -Append
    $(TimeStamp) + " : BC Svc Distributed Mode Check Returned - " + $Compliance | Out-File $Logfile -Append
    Return $Compliance
}

$(TimeStamp) + " : BC Svc Distributed Mode Check Returned - " + $Compliance | Out-File $Logfile -Append

#=========================================================
#Next Check the BranchCache SERVE ON BATTERY is set to your preferred setting
#=========================================================

switch ($ServeOnBattery)
{
    TRUE {$ServeOnBattery = "= Enabled"}
    FALSE{$ServeOnBattery = "= Disabled"}
}

if(@($ShowStatusAll | Select-String -SimpleMatch -Pattern "Serve peers on battery power")[0].ToString() -match $ServeOnBattery) 
{
   $Compliance = "Compliant"
}
else
{   
    $Compliance = "BC Battery Mode Non-Compliant"
    $(TimeStamp) + " : BC Serve Peers on Battery not setup correctly " | Out-File $Logfile -Append
    $(TimeStamp) + " : BC Battery Check Mode Check Returned - " + $Compliance | Out-File $Logfile -Append
    Return $Compliance
}

$(TimeStamp) + " : BC Battery Check Mode Check Returned - " + $Compliance | Out-File $Logfile -Append

#=========================================================
#finally check the branchcache service is started and is set to auto-start
#=========================================================
$s = gwmi -Query "Select State, StartMode From Win32_Service Where Name='peerdistsvc'"

if (($s.StartMode -eq "Auto") -and ($s.State -eq "Running"))
{
    $Compliance = "Compliant"
}
else
{
    $Compliance = " BC Svc State Non-Compliant"
    $(TimeStamp) + " : BC Service not set to Autostart " | Out-File $Logfile -Append
    $(TimeStamp) + " : BC Svc startup Check Returned - " + $Compliance | Out-File $Logfile -Append
    Return $Compliance
}

$(TimeStamp) + " : BC Svc startup Check Returned - " + $Compliance | Out-File $Logfile -Append
Return $Compliance
</DiscoveryScriptBody>
            <RemediationScriptBody ScriptType="PowerShell">&lt;# 
   .DISCLAIMER Use at your own risk. Test it. Change it to suit your setup. 
   If it breaks your sh*t we are most definitely NOT to blame. We have alibis.
   
   .SYNOPSIS 
    Remediate Branchcache port and configures that branchcache service

   .DESCRIPTION
    1. Set the required Port Number for P2P transfers
    2. Configure the BranchCache Service for Distributed MOde
    3. Delete the old reservation on port 80 if it's still there
    4. Sets the Cache data TTL value
    5. Configures the BC service to Autostart and starts it
    6. Configures the Windows Firewall
    Creates a Logfile in the TEMP folder



    AUTHOR: 2Pint Software
    EMAIL: support@2pintsoftware.com
    VERSION: 1.0.1.0
    DATE:12/08/2019 
    
    CHANGE LOG: 
    1.0.0.0 : 12/10/2017  : Initial version of script 
    1.0.0.2 added check for the old port 80 reservation -  deletes it if exist
    1.0.0.3 Sets firewall rules to the correct port - SCCM can create multiple rules which aren't all set by default
    1.0.0.4 Consolidated the Port Check and service check into one to reduce errors
    1.0.0.5 Added Battery Check 'Serve Peers on Battery' - set to TRUE/FALSE
    1.0.0.6 : 09/06/2018  : Changed the order of things and added a service stop. Also added Cache TTL
    1.0.0.7 : 14/08/2018  : Removes all BC Firewall Rules first - and then re-adds them later. Also removes Hosted Cache Rules.
    1.0.0.8 : 16/08/2018  : Added a check to see if the Windows Firewall is in play - if not - no point fiddling!
    1.0.0.9 : 23/07/2019  : Improved url reservation handling - changed the order a little
    1.0.1.0 : 12/08/2019  : Improved url reservation handling to remove old url if the port is changed

   .LINK
    https://2pintsoftware.com
#&gt;
Function TimeStamp {$(get-date -UFormat %D-%T)} 

Function Get-FireWallRule
{Param ($Name, $Direction, $Enabled, $Protocol, $profile, $action, $grouping)
$Rules=(New-object –comObject HNetCfg.FwPolicy2).rules
If ($name)      {$rules= $rules | where-object {$_.name     –like $name}}
If ($direction) {$rules= $rules | where-object {$_.direction  –eq $direction}}
If ($Enabled)   {$rules= $rules | where-object {$_.Enabled    –eq $Enabled}}
If ($protocol)  {$rules= $rules | where-object {$_.protocol  -eq $protocol}}
If ($profile)   {$rules= $rules | where-object {$_.Profiles -bAND $profile}}
If ($Action)    {$rules= $rules | where-object {$_.Action     -eq $Action}}
If ($Grouping)  {$rules= $rules | where-object {$_.Grouping -Like $Grouping}}
$rules}

$Logfile = "$ENV:TEMP\BCTuner_Remediation00.log"
#delete any existing logfile if it exists
If (Test-Path $Logfile){ri $Logfile -Force -ErrorAction SilentlyContinue -Confirm:$false}


#EDIT THIS VARIABLE TO THE PORT THAT YOU WANT BRANCHCACHE TO USE
#THIS SHOULD BE THE SAME AS THE EQUIVALENT IN THE DISCOVERY SCRIPT
#--------------&lt;&lt;&lt;&lt;&lt;
$BCPort = 1337
#--------------&lt;&lt;&lt;&lt;&lt;
#SET THIS VARIABLE TO DETERMINE IF CLIENTS CAN SERVE PEERS WHILE ON BATTERY
#TRUE/FALSE
#-----------------------&lt;&lt;&lt;&lt;&lt;
$ServeOnBattery = "TRUE"
#-----------------------&lt;&lt;&lt;&lt;&lt;

#SET THIS VARIABLE to set the TTL  - this is the time (Days) that BranchCache will keep content in the cache
#-----------------------&lt;&lt;&lt;&lt;&lt;
$TTL = 180
#-----------------------&lt;&lt;&lt;&lt;&lt;


$RegPath = 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\PeerDist\DownloadManager\Peers'
$TTLRegPath = 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\PeerDist'
$SetBCCommand = {netsh branchcache set service mode=distributed serveonbattery=$ServeOnBattery}
$ShowHttpUrl = netsh http show url
$DeleteResCmd = {netsh http delete urlacl url=$urlToDelete}
$DisableBCCommand = {netsh branchcache set service mode=disabled}

$(TimeStamp) + " : BC Port And Service Remediation is Running   " | Out-File $Logfile -Append

#---------------------------------------------------------------------------------------
#Stop BranchCache (Only if installed) 
#---------------------------------------------------------------------------------------
$s = Get-Service -name PeerDistSvc -ErrorAction SilentlyContinue

If ($s){
Stop-Service $s.name -Force
}

#---------------------------------------------------------------------------------------
#Set the correct BranchCache ListenPort in the registry
#---------------------------------------------------------------------------------------
#If the key doesn't exist - create it, and set the port, job done

if (!(Get-Item -path $RegPath\Connection -ErrorAction SilentlyContinue))
{
        $(TimeStamp) + " : Custom BC Port Reg Key didn't exist - remediating   " | Out-File $Logfile -Append
        New-Item -Path $RegPath -name Connection -force
        New-ItemProperty -Path $RegPath\Connection -Name ListenPort -PropertyType DWORD -Value $BCPort
        New-ItemProperty -Path $RegPath\Connection -Name ConnectPort -PropertyType DWORD -Value $BCPort
      }

# If the key already exists, check the ListenPort value and change if required
if((Get-ItemProperty -path $RegPath\Connection -Name ListenPort -ErrorAction SilentlyContinue).ListenPort -ne $BCPort)
{
$(TimeStamp) + " : Custom BC ListenPort Reg value exists but is incorrect - remediating   " | Out-File $Logfile -Append
Set-ItemProperty -Path $RegPath\Connection -Name ListenPort -Value $BCPort
}

# If the key already exists, check the ConnectPort value and change if required
if((Get-ItemProperty -path $RegPath\Connection -Name ConnectPort -ErrorAction SilentlyContinue).ConnectPort -ne $BCPort)
{
$(TimeStamp) + " : Custom BC ConnectPort Reg value exists but is incorrect - remediating   " | Out-File $Logfile -Append
Set-ItemProperty -Path $RegPath\Connection -Name ConnectPort -Value $BCPort
}

#---------------------------------------------------------------------------------------
# Set the correct TTL - this is the time (Days) that BranchCache will keep content in the cache
#---------------------------------------------------------------------------------------
#If the key doesn't exist - create it, and set the TTL, job done

if (!(Get-Item -path $TTLRegPath\Retrieval -ErrorAction SilentlyContinue))
{
        New-Item -Path $TTLRegPath -name Retrieval -force  
        New-ItemProperty -Path $TTLRegPath\Retrieval -Name SegmentTTL -PropertyType DWORD -Value $TTL  
}
# IF the key already exists, check the value and change if required
if(((Get-ItemProperty -path $TTLRegPath\Retrieval -Name SegmentTTL -ErrorAction SilentlyContinue).SegmentTTL) -ne $TTL)
{
Set-ItemProperty -Path $TTLRegPath\Retrieval -Name SegmentTTL -Value $TTL  
}

$(TimeStamp) + " : BranchCache TTL Remediation Complete   " | Out-File $Logfile -Append

#---------------------------------------------------------------------------------------
#Check the state of the Windows Firewall
#---------------------------------------------------------------------------------------
$FWCheck = invoke-command -scriptblock {
    try{ get-netfirewallprofile | select name,enabled }#Win10 cmd
    catch{ netsh advfirewall show all state }#Win7 cmd
}

if(($FWCheck | Select-String -SimpleMatch -Pattern "ON")-or ($FWCheck | Select-String -SimpleMatch -Pattern "True"))
{
$FWState = $true
$(TimeStamp) + " : One or more Windows Firewall Profiles are Enabled" | Out-File $Logfile -Append
}
Else
{
$FWState = $false
$(TimeStamp) + " : FW is not enabled - so skipping that part.." | Out-File $Logfile -Append
}
#---------------------------------------------------------------------------------------
# END Check the state of the Windows Firewall
#---------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------
#Nuke existing F/W Rules (if it's enabled) in case they are a mess!
#---------------------------------------------------------------------------------------
If ($FWState -eq $true)
{
$(TimeStamp) + " : Removing old F/W Rules " | Out-File $Logfile -Append
#=======================================
#Remove Content Retrieval Rules (IN/OUT)
#=======================================
netsh advfirewall firewall delete rule name="BranchCache Content Retrieval (HTTP-Out)"
netsh advfirewall firewall delete rule name="BranchCache Content Retrieval (HTTP-In)"

#=======================================
#Remove Content Discovery Rules (IN/OUT)
#=======================================
netsh advfirewall firewall delete rule name="BranchCache Peer Discovery (WSD-Out)"
netsh advfirewall firewall delete rule name="BranchCache Peer Discovery (WSD-In)"
}
#---------------------------------------------------------------------------------------
# END Nuke existing F/W Rules in case they are a mess!
#---------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------
#Enable BranchCache distributed mode (this also sets the correct 'Serve Peers on Battery' Mode)
#It will also re-create the F/W Rules
#---------------------------------------------------------------------------------------
$(TimeStamp) + " : Setting BranchCache service to Distributed Mode " | Out-File $Logfile -Append
Invoke-Command -ScriptBlock $SetBCCommand

#---------------------------------------------------------------------------------------
# Set the service to auto-start and start it if not running
#---------------------------------------------------------------------------------------
Set-Service -Name "peerdistsvc" -StartupType automatic
if ((Get-Service -Name PeerDistSvc).Status -ne "Running")
{Start-Service -Name PeerdistSvc}


#---------------------------------------------------------------------------------------
#remove the old existing URL reservation i.e remove any BranchCache url reservation that DOEs NOT have the current Port
#---------------------------------------------------------------------------------------

# Checking for old obsolete port reservations - first, select all BranchCache url reservations
$ResList = ($ShowHttpUrl | Select-String -SimpleMatch -Pattern "/116B50EB-ECE2-41ac-8429-9F9E963361B7/")

ForEach($Res in $ResList){

$a = [regex]::Matches($Res, 'http(.*)')
 If($a -like "http://+:$BCPort*"){$(TimeStamp) + " : Not deleting the current URL: $a" | Out-File $Logfile -Append }
 else {$urlToDelete=$a.Value.Trim()
 invoke-command -scriptblock $DeleteResCmd| Out-File $Logfile -Append }
 
}

</RemediationScriptBody>
          </ScriptDiscoverySource>
        </SimpleSetting>
      </RootComplexSetting>
    </Settings>
    <Rules>
      <Rule xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules" id="Rule_40a1854c-3485-49a8-8201-4082a556cb89" Severity="Warning" NonCompliantWhenSettingIsNotFound="true">
        <Annotation>
          <DisplayName Text="EQ Compliant" ResourceId="ID-13624c8b-69bb-4c6b-9f24-63ff0e39407a" />
          <Description Text="" />
        </Annotation>
        <Expression>
          <Operator>Equals</Operator>
          <Operands>
            <SettingReference AuthoringScopeId="ScopeId_EB233605-0626-4D1E-BA29-3B1B229D36CA" LogicalName="Application_9d5cd961-3a14-4c1b-bd5c-bf9ba72d5a55" Version="4" DataType="String" SettingLogicalName="ScriptSetting_37145012-b43c-4b5c-8b30-312d1befab23" SettingSourceType="Script" Method="Value" Changeable="true" />
            <ConstantValue Value="Compliant" DataType="String" />
          </Operands>
        </Expression>
      </Rule>
      <Rule xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules" id="Rule_b56e7bef-2452-4d9d-b80e-bd3b56596c55" Severity="Warning" NonCompliantWhenSettingIsNotFound="true">
        <Annotation>
          <DisplayName Text="EQ Compliant" ResourceId="ID-242d1b77-924f-41a0-829a-5f57a998d66d" />
          <Description Text="" />
        </Annotation>
        <Expression>
          <Operator>Equals</Operator>
          <Operands>
            <SettingReference AuthoringScopeId="ScopeId_EB233605-0626-4D1E-BA29-3B1B229D36CA" LogicalName="Application_9d5cd961-3a14-4c1b-bd5c-bf9ba72d5a55" Version="4" DataType="String" SettingLogicalName="ScriptSetting_5e7a6c9b-0e7e-42b7-9ae7-3a99a24e0ca7" SettingSourceType="Script" Method="Value" Changeable="true" />
            <ConstantValue Value="Compliant" DataType="String" />
          </Operands>
        </Expression>
      </Rule>
    </Rules>
    <PlatformApplicabilityCondition xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
      <OperatingSystemExpression>
        <Operator>OneOf</Operator>
        <Operands>
          <RuleExpression RuleId="Windows/All_x64_Windows_7_Client" />
          <RuleExpression RuleId="Windows/All_x86_Windows_7_Client" />
          <RuleExpression RuleId="Windows/x64_Windows_7_Client" />
          <RuleExpression RuleId="Windows/x64_Windows_7_SP1" />
          <RuleExpression RuleId="Windows/x86_Windows_7_Client" />
          <RuleExpression RuleId="Windows/x86_Windows_7_SP1" />
          <RuleExpression RuleId="Windows/All_x64_Windows_8_Client" />
          <RuleExpression RuleId="Windows/All_x86_Windows_8_Client" />
          <RuleExpression RuleId="Windows/All_x64_Windows_8.1_Client" />
          <RuleExpression RuleId="Windows/All_x86_Windows_8.1_Client" />
          <RuleExpression RuleId="Windows/All_x64_Windows_10_and_higher_Clients" />
          <RuleExpression RuleId="Windows/All_x86_Windows_10_and_higher_Clients" />
        </Operands>
      </OperatingSystemExpression>
    </PlatformApplicabilityCondition>
    <ScriptDiscoveryInfo ScriptType="PowerShell">
      <Script>If (get-service -Name peerdistsvc -ErrorAction SilentlyContinue)
{Write-Host "Installed"}</Script>
    </ScriptDiscoveryInfo>
  </Application>
</DesiredConfigurationDigest>